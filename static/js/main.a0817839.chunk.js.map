{"version":3,"sources":["components/Header.js","components/Input.js","components/Button.js","components/TodoItem.js","components/Parent.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","style","marginBottom","Input","props","onChange","onChangeHandler","onKeyPress","enterKeyPressHandler","type","value","maxLength","placeholder","onClick","addBtnHandler","Button","btnType","marginRight","btnClickHandler","name","marginLeft","count","TodoItem","itemType","todoClickHandler","content","deleteBtnHandler","data-dismiss","Parent","state","todoText","todoList","filterTodo","event","setState","target","trim","todoListCopy","text","id","shortid","generate","done","key","deleteHandler","e","stopPropagation","filter","todo","map","allBtnHandler","pendingBtnHandler","doneBtnHandler","json","localStorage","getItem","todos","JSON","parse","this","prevProps","prevStates","stringify","setItem","bind","length","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a0817839.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n    return (\n        <h1 className=\"display-4 text-center\" style={{marginBottom: \"30px\"}}>To Do List</h1>\n    )\n}\n\nexport default Header\n","import React from 'react'\n\nconst Input = (props) => {\n    return (\n        <div className=\"row\" style={{marginBottom:\"10px\"}}>\n                    <div className=\"col-sm-9\">\n                        <div className=\"form-group\">\n                            <input  onChange={props.onChangeHandler} onKeyPress={props.enterKeyPressHandler} type=\"text\" value={props.value} maxLength=\"30\" className=\"form-control\" placeholder=\"Add a Todo\"/>\n                        </div>\n                    </div>\n\n                    <div className=\"col-sm-3\">\n                        <div className=\"form-group\">\n                        <button onClick={props.addBtnHandler} type=\"button\" className=\"btn btn-primary btn-block\">Add</button>\n                        </div>\n                    </div>\n                </div>\n    )\n}\n\nexport default Input\n","import React from 'react'\n\nconst Button = (props) => {\n    return (\n        <button type=\"button\" className={props.btnType} style={{marginRight: \"15px\"}} onClick={props.btnClickHandler}>\n        {props.name}\n    <span className=\"badge badge-light\" style={{ marginLeft: \"10px\" }} >{props.count}</span>\n        </button>\n    )\n}\n\nexport default Button\n","import React from 'react'\n\nconst TodoItem = (props) => {\n    return (\n        <div className={props.itemType} onClick={props.todoClickHandler}>\n            {props.content}\n            <button onClick={props.deleteBtnHandler} type=\"button\" className=\"close\" data-dismiss=\"alert\" >&times;</button>\n        </div>\n    )\n}\n\nexport default TodoItem\n","import React, { Component } from 'react'\nimport Header from './Header'\nimport Input from './Input'\nimport Button from './Button'\nimport TodoItem from './TodoItem'\nimport shortid from 'shortid'\nclass Parent extends Component {\n    state=\n    {\n        todoText: '',\n        todoList:[],\n        filterTodo: 'all'\n    }\n\n    onChangeHandler =(event)=>\n    {\n       \n        this.setState(\n            {\n            todoText: event.target.value\n            }\n        )\n    }\n    addBtnHandler = () =>\n    {\n        if(this.state.todoText.trim() !=='')\n        {\n            let text=this.state.todoText.trim();\n            let todoListCopy=[{text:text,id:shortid.generate(),done:false},...this.state.todoList];\n\n            this.setState(\n                {\n                todoList:todoListCopy,\n                todoText:''\n                }\n            )\n        }\n    }\n\n    enterKeyPressHandler =(event) =>\n    {\n        \n        if(event.key==='Enter')\n        {\n            this.addBtnHandler();   \n        }\n    }\n\n    deleteHandler = (e,id) =>\n    {\n        e.stopPropagation();\n        const todoListCopy=this.state.todoList.filter((todo) => \n        {\n            return(todo.id!==id)\n        })\n        this.setState({todoList:todoListCopy});\n    }\n\n    todoClickHandler = (id) =>\n    {\n        const todoListCopy=this.state.todoList.map((todo)=>\n        {\n            return(\n                todo.id === id ? {text:todo.text,id:todo.id,done:!todo.done} : todo\n            )\n        })\n        this.setState(\n            {\n                todoList:todoListCopy\n            }\n        )\n    }\n\n    allBtnHandler =() =>\n    {\n        this.setState({filterTodo: \"all\"})\n    }\n    pendingBtnHandler =() =>\n    {\n        this.setState({filterTodo: \"pending\"})\n    }\n    doneBtnHandler =() =>\n    {\n        this.setState({filterTodo: \"done\"})\n    }\n\n    componentDidMount() {\n        const json = localStorage.getItem('todos');\n        const todos = JSON.parse(json)\n        this.setState(todos);\n    }\n\n    componentDidUpdate(prevProps, prevStates) {\n        const json = JSON.stringify(this.state);\n        localStorage.setItem('todos', json);\n    }\n\n\n    render() {\n\n        const filteredTodos=this.state.todoList.filter((todo) => {\n            if(this.state.filterTodo===\"all\")\n            {\n                return true;\n            }\n            else if(this.state.filterTodo===\"done\" && todo.done===true)\n            {\n                return true;\n            }\n            else if(this.state.filterTodo===\"pending\" && todo.done===false)\n            {\n                return true;\n            }\n            return false;\n            })\n\n\n\n        const todos=filteredTodos.map((todo)=>\n        {\n            return(\n                <TodoItem key={todo.id} \n                todoClickHandler={this.todoClickHandler.bind(this,todo.id)} \n                itemType={todo.done === false? \"alert alert-secondary alert-dismissible fade show\" : \"alert alert-success alert-dismissible fade show strike\"} \n                content={todo.text} \n                deleteBtnHandler={(e)=>this.deleteHandler(e,todo.id)}/>\n            )\n        })\n        return (\n            <div>\n                <Header/>\n                <Input  value={this.state.todoText} \n                onChangeHandler={this.onChangeHandler.bind(this)} \n                addBtnHandler={this.addBtnHandler} \n                enterKeyPressHandler={this.enterKeyPressHandler.bind(this)}/>\n\n                <div style={{ marginBottom: \"20px\" }}>\n                {this.state.todoList.length > 0 && <Button btnClickHandler={this.allBtnHandler} btnType=\"btn btn-primary\" name=\"All\" count={this.state.todoList.length}/>}\n                {this.state.todoList.filter(todo => todo.done).length >0 && <Button btnClickHandler={this.doneBtnHandler} btnType=\"btn btn-success\" name=\"Done\" count={this.state.todoList.filter(todo => todo.done).length}/>}\n                {this.state.todoList.filter(todo => todo.done===false).length >0 && <Button btnClickHandler={this.pendingBtnHandler} btnType=\"btn btn-warning\" name=\"Pending\" count={this.state.todoList.filter(todo => todo.done===false).length}/>}\n                \n                \n                </div>\n                {todos}\n                \n            </div>\n\n        )\n    }\n}\n\nexport default Parent\n\n","import React from 'react';\nimport Parent from './components/Parent'\n\n\nfunction App() {\n  return (\n    <div>\n      <Parent/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}